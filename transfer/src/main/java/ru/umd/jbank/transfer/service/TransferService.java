package ru.umd.jbank.transfer.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import ru.umd.jbank.transfer.integration.client.account.AccountClient;
import ru.umd.jbank.transfer.integration.client.exchange.ExchangeClient;
import ru.umd.jbank.transfer.integration.client.notification.NotificationClient;

import java.math.BigDecimal;

@Service
@RequiredArgsConstructor
@Slf4j
public class TransferService {
    private final AccountClient accountClient;

    private final ExchangeClient exchangeClient;

    private final AccountOperationService accountOperationService;

    private final NotificationClient notificationClient;

    public void innerTransfer(InnerTransferRequest innerTransferRequest) {
        log.info(
            "–ù–∞—á–∞–ª–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞: —Å–æ —Å—á–µ—Ç–∞ {} –Ω–∞ —Å—á–µ—Ç {} –Ω–∞ —Å—É–º–º—É {}",
            innerTransferRequest.sourceBankAccountId,
            innerTransferRequest.targetBankAccountId,
            innerTransferRequest.amount
        );

        var account = accountClient.getAccount(innerTransferRequest.accountId);
        if (innerTransferRequest.sourceBankAccountId.equals(innerTransferRequest.targetBankAccountId)) {
            throw new IllegalArgumentException("Source and target bank accounts are the same");
        }

        var sourceBankAccount = account.bankingAccounts()
            .stream()
            .filter(it -> it.id().equals(innerTransferRequest.sourceBankAccountId))
            .findFirst()
            .orElseThrow(() -> new IllegalArgumentException("Source bank account not found"));

        var targetBankAccount = account.bankingAccounts()
            .stream()
            .filter(it -> it.id().equals(innerTransferRequest.targetBankAccountId))
            .findFirst()
            .orElseThrow(() -> new IllegalArgumentException("Target bank account not found"));

        BigDecimal amountToDeposit = innerTransferRequest.amount;

        if (!sourceBankAccount.currency().equals(targetBankAccount.currency())) {
            amountToDeposit = exchangeClient.calculate(
                sourceBankAccount.currency().getCurrencyCode(),
                targetBankAccount.currency().getCurrencyCode(),
                innerTransferRequest.amount
            );

            log.info(
                "–°—É–º–º–∞ –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {} {} -> {} {}",
                innerTransferRequest.amount,
                sourceBankAccount.currency().getCurrencyCode(),
                amountToDeposit,
                targetBankAccount.currency().getCurrencyCode()
            );
        }

        executeTransferWithRetryAndCompensation(
            innerTransferRequest.sourceBankAccountId,
            innerTransferRequest.targetBankAccountId,
            innerTransferRequest.amount,
            amountToDeposit
        );

        log.info(
            "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω: —Å–æ —Å—á–µ—Ç–∞ {} –Ω–∞ —Å—á–µ—Ç {} –Ω–∞ —Å—É–º–º—É {}",
            innerTransferRequest.sourceBankAccountId,
            innerTransferRequest.targetBankAccountId,
            amountToDeposit
        );

        sendInnerTransferSuccessNotification(innerTransferRequest, amountToDeposit);
    }

    public void externalTransfer(ExternalTransferRequest externalTransferRequest) {
        log.info(
            "–ù–∞—á–∞–ª–æ –≤–Ω–µ—à–Ω–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞: —Å–æ —Å—á–µ—Ç–∞ {} –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç {} —Å—á–µ—Ç {} –Ω–∞ —Å—É–º–º—É {}",
            externalTransferRequest.sourceBankAccountId,
            externalTransferRequest.targetAccountId,
            externalTransferRequest.targetBankAccountId,
            externalTransferRequest.amount
        );

        var sourceAccount = accountClient.getAccount(externalTransferRequest.sourceAccountId);
        var sourceBankAccount = sourceAccount
            .bankingAccounts()
            .stream()
            .filter(it -> it.id().equals(externalTransferRequest.sourceBankAccountId))
            .findFirst()
            .orElseThrow(() -> new IllegalArgumentException("Source bank account not found"));

        var targetAccount = accountClient.getAccount(externalTransferRequest.targetAccountId);
        var targetBankAccount = targetAccount
            .bankingAccounts()
            .stream()
            .filter(it -> it.id().equals(externalTransferRequest.targetBankAccountId))
            .findFirst()
            .orElseThrow(() -> new IllegalArgumentException("Target bank account not found"));

        if (externalTransferRequest.sourceAccountId.equals(externalTransferRequest.targetAccountId)) {
            throw new IllegalArgumentException("Source and target accounts are the same. Use innerTransfer instead");
        }

        BigDecimal amountToDeposit = externalTransferRequest.amount;

        if (!sourceBankAccount.currency().equals(targetBankAccount.currency())) {
            log.info(
                "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã: {} -> {}",
                sourceBankAccount.currency().getCurrencyCode(),
                targetBankAccount.currency().getCurrencyCode()
            );

            amountToDeposit = exchangeClient.calculate(
                sourceBankAccount.currency().getCurrencyCode(),
                targetBankAccount.currency().getCurrencyCode(),
                externalTransferRequest.amount
            );

            log.info(
                "–°—É–º–º–∞ –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {} {} -> {} {}",
                externalTransferRequest.amount,
                sourceBankAccount.currency().getCurrencyCode(),
                amountToDeposit,
                targetBankAccount.currency().getCurrencyCode()
            );
        }

        executeTransferWithRetryAndCompensation(
            externalTransferRequest.sourceBankAccountId,
            externalTransferRequest.targetBankAccountId,
            externalTransferRequest.amount,
            amountToDeposit
        );

        log.info(
            "–í–Ω–µ—à–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω: —Å–æ —Å—á–µ—Ç–∞ {} –Ω–∞ —Å—á–µ—Ç {} –Ω–∞ —Å—É–º–º—É {}",
            externalTransferRequest.sourceBankAccountId,
            externalTransferRequest.targetBankAccountId,
            amountToDeposit
        );

        sendExternalTransferSuccessNotifications(externalTransferRequest, amountToDeposit);
    }

    private void executeTransferWithRetryAndCompensation(
        Long sourceBankAccountId,
        Long targetBankAccountId,
        BigDecimal withdrawalAmount,
        BigDecimal depositAmount
    ) {
        boolean withdrawalCompleted = false;

        try {
            // –®–∞–≥ 1: –°–ø–∏—Å–∞–Ω–∏–µ —Å retry
            log.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∞–Ω–∏—è {} —Å —Å—á–µ—Ç–∞ {}", withdrawalAmount, sourceBankAccountId);
            accountOperationService.makeWithdrawalWithRetry(sourceBankAccountId, withdrawalAmount);
            withdrawalCompleted = true;

            // –®–∞–≥ 2: –ó–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å retry
            log.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è {} –Ω–∞ —Å—á–µ—Ç {}", depositAmount, targetBankAccountId);
            accountOperationService.makeDepositWithRetry(targetBankAccountId, depositAmount);

            log.info("–ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω");

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞: {}", e.getMessage());

            if (withdrawalCompleted) {
                try {
                    log.warn(
                        "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É—é—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: –≤–æ–∑–≤—Ä–∞—Ç {} –Ω–∞ —Å—á–µ—Ç {}",
                        withdrawalAmount, sourceBankAccountId
                    );
                    accountOperationService.makeDepositWithRetry(sourceBankAccountId, withdrawalAmount);
                    log.info("–ö–æ–º–ø–µ–Ω—Å–∏—Ä—É—é—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
                } catch (Exception compensationError) {
                    log.error(
                        "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É—é—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: {}",
                        compensationError.getMessage()
                    );
                    throw new RuntimeException("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", compensationError);
                }
            }
            throw new RuntimeException("–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω", e);
        }
    }

    private void sendInnerTransferSuccessNotification(
        InnerTransferRequest request,
        BigDecimal finalAmount
    ) {
        try {
            String message = String.format(
                "‚úÖ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n" +
                    "üí∏ –°—É–º–º–∞: %s\n" +
                    "üì§ –°–æ —Å—á–µ—Ç–∞: %s\n" +
                    "üì• –ù–∞ —Å—á–µ—Ç: %s\n" +
                    "üïí –í—Ä–µ–º—è: %s",
                finalAmount,
                request.sourceBankAccountId,
                request.targetBankAccountId,
                java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"))
            );

            notificationClient.notify(
                new NotificationClient.NotificationRequest(
                    request.accountId,
                    message
                )
            );

            log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –ø–µ—Ä–µ–≤–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {}", request.accountId);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –ø–µ—Ä–µ–≤–æ–¥–µ: {}", e.getMessage());
        }
    }

    private void sendExternalTransferSuccessNotifications(
        ExternalTransferRequest request,
        BigDecimal finalAmount
    ) {
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
        try {
            String senderMessage = String.format(
                "‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n" +
                    "üí∏ –°—É–º–º–∞: %s\n" +
                    "üì§ –°–æ —Å—á–µ—Ç–∞: %s\n" +
                    "üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—é (–∞–∫–∫–∞—É–Ω—Ç): %s\n" +
                    "üì• –ù–∞ —Å—á–µ—Ç: %s\n" +
                    "üïí –í—Ä–µ–º—è: %s",
                request.amount,
                request.sourceBankAccountId,
                request.targetAccountId,
                request.targetBankAccountId,
                java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"))
            );

            notificationClient.notify(
                new NotificationClient.NotificationRequest(
                    request.sourceAccountId,
                    senderMessage
                )
            );

            log.info(
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤–Ω–µ—à–Ω–µ–º –ø–µ—Ä–µ–≤–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {}",
                request.sourceAccountId
            );
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –≤–Ω–µ—à–Ω–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞: {}", e.getMessage());
        }

        try {
            String recipientMessage = String.format(
                "üí∞ –ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ–≤–æ–¥!\n" +
                    "üí∏ –°—É–º–º–∞: %s\n" +
                    "üë§ –û—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–∞–∫–∫–∞—É–Ω—Ç): %s\n" +
                    "üì• –ù–∞ –≤–∞—à —Å—á–µ—Ç: %s\n" +
                    "üïí –í—Ä–µ–º—è: %s",
                finalAmount,
                request.sourceAccountId,
                request.targetBankAccountId,
                java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"))
            );

            notificationClient.notify(
                new NotificationClient.NotificationRequest(
                    request.targetAccountId,
                    recipientMessage
                )
            );

            log.info(
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤–Ω–µ—à–Ω–µ–º –ø–µ—Ä–µ–≤–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {}",
                request.targetAccountId
            );
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—é –≤–Ω–µ—à–Ω–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞: {}", e.getMessage());
        }
    }

    public record InnerTransferRequest(
        Long accountId,
        Long sourceBankAccountId,
        Long targetBankAccountId,
        BigDecimal amount
    ) {
    }

    public record ExternalTransferRequest(
        Long sourceAccountId,
        Long sourceBankAccountId,
        Long targetAccountId,
        Long targetBankAccountId,
        BigDecimal amount
    ) {
    }

}
